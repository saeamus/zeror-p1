<!-- file:m-t1sub1sub3.ejs
     작성:20200303 james
     설명:
     T1 sub1 sub3 메뉴 화면.
     바탕은 layout-grid2.ejs 이고
     <main>태그 부분만 작성하면 된다-->

<div style="position: relative;">
  <div style="width: 850px;">
    <div id="myGrid" style="width: 100%; height: 500px;"></div>
    <div id="pager" style="width: 100%; height: 20px;"></div>
    <br />
    <button id="btnDelete" onclick="deleteRow()">ROW삭제</button>
    <button id="btnSave" onclick="saveData()">변경저장</button>
    <button id="btnCancel" onclick="cancelData()">변경취소</button>
    <button id="btnReport" onclick="makeReport('list')" style="float: right;">회원명부발행</button>
    <button id="btnReport" onclick="makeReport('person')" style="float: right;">회원등록카드발행</button>
  </div>
  <div id="pdfDoc" style="width: 100%; height: auto; float: right; box-sizing: border-box; background: rgb(0, 225, 255);"></div>
  <div class="options-panel">
    <h2>Demonstrates:</h2>
    <ul>
      <li>adding basic keyboard navigation and editing</li>
      <li>custom editors and validators</li>
      <li>auto-edit settings</li>
    </ul>

    <h2>View Source:</h2>
    <ul>
      <li>
        <A
          href="https://github.com/saeamus/zeror-p1/tree/master/node-project/testNode/views/m-t1sub1sub3.ejs"
          target="_sourcewindow"
        >
          View the source for this page on Github</A
        >
      </li>
    </ul>
  </div>
</div>

<script src="/lib/firebugx.js"></script>

<!-- <script src="/lib/jquery-1.12.4.min.js"></script> -->
<script src="/lib/jquery-ui.min.js"></script>
<script src="/lib/jquery.event.drag-2.3.0.js"></script>

<script src="/controls/slick.core.js"></script>
<script src="/plugins/slick.cellrangedecorator.js"></script>
<script src="/plugins/slick.cellrangeselector.js"></script>
<script src="/plugins/slick.cellselectionmodel.js"></script>
<script src="/controls/slick.formatters.js"></script>
<script src="/controls/slick.editors.js"></script>
<script src="/controls/slick.grid.js"></script>

<script src="/plugins/slick.rowselectionmodel.js"></script>

<script src="/controls/slick.dataview.js"></script>
<script src="/controls/slick.pager.js"></script>
<script src="/controls/slick.columnpicker.js"></script>

<!-- <script src="/javascripts/getTimeStamp.js"></script> -->
<!-- moment CDN과 local time CDN -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/locale/ko.js"></script>
<script>
  var date = new Date();
  var dateTime = moment(date).format("YYYY-MM-DD HH:mm:ss");
  // $('.dateview2').html(moment('2019-08-10').format('YYYY MM DD HH:mm:ss'));
</script>

<script>
  function MultiSelectDropdownEditor(args) {
    var $input,
      $wrapper,
      $checkBoxInput,
      selectedchkBoxArray = [];
    var defaultValue;
    var scope = this;
    // check scope get this value

    var chkBoxListData = getChkBoxDataList(args);
    var chkBoxAllValues = chkBoxListData.AllValues;
    chkBoxAllValues.sort();
    var selectedchkBox = chkBoxListData.SelectedValues;
    if (!(selectedchkBox == undefined || selectedchkBox == "")) {
      if (selectedchkBox.length > 0) selectedchkBoxArray = selectedchkBox.split(";");
    }
    this.init = function () {
      if (chkBoxAllValues.length != 0) {
        var $container = $("body");
        $wrapper = $(
          "<DIV style='z-index:10000;position:absolute;background:white;padding:5px;border:3px solid gray; -moz-border-radius:10px; border-radius:10px;'/>"
        ).appendTo($container);

        for (var i = 0; i < chkBoxAllValues.length; i++) {
          if (!(selectedchkBoxArray == undefined || selectedchkBoxArray == "")) {
            if (selectedchkBoxArray.length > 0 && selectedchkBoxArray.indexOf(chkBoxAllValues[i]) > -1) {
              $checkBoxInput = $(
                "<input class='chkBox' type='checkbox' name='" +
                  chkBoxAllValues[i] +
                  "' id='chkBox_" +
                  i +
                  "' checked='checked'/>" +
                  chkBoxAllValues[i] +
                  "<br />"
              );
            } else
              $checkBoxInput = $(
                "<input class='chkBox' type='checkbox' name='" +
                  chkBoxAllValues[i] +
                  "' id='chkBox_" +
                  i +
                  "'/>" +
                  chkBoxAllValues[i] +
                  "<br />"
              );
          } else
            $checkBoxInput = $(
              "<input class='chkBox' type='checkbox' name='" +
                chkBoxAllValues[i] +
                "' id='chkBox_" +
                i +
                "'/>" +
                chkBoxAllValues[i] +
                "<br />"
            );

          $wrapper.append($checkBoxInput);
        }

        $wrapper.append("<br/><br/>");

        $input = $(
          "<TEXTAREA style='display:none;' hidefocus rows=25 style='background:white;width:150px;height:100px;border:1px solid;outline:0'>"
        ).appendTo($wrapper);

        $("<DIV style='text-align:right'><BUTTON>Save</BUTTON><BUTTON>Cancel</BUTTON></DIV>").appendTo($wrapper);

        $wrapper.find("button:first").on("click", this.save);
        $wrapper.find("button:last").on("click", this.cancel);
        $input.on("keydown", this.handleKeyDown);
      } else {
        alert("Dropdown list is empty. Kindly provide data for this dropdown list");
      }
      scope.position(args.position);
      $input.focus().select();

      $('input[type="checkbox"]').change(function () {
        var name = $(this).prop("name");
        var chkboxId = $(this).prop("id");
        var check = $(this).prop("checked");
        var currentValue = $input.val();
        if (check) {
          var allSelectedValues = "";
          $('input[type="checkbox"]').each(function () {
            var isChecked = $(this).prop("checked");
            var name = $(this).prop("name");
            var currentChekBoxId = $(this).prop("id");
            if (isChecked) {
              if (allSelectedValues.length == 0) allSelectedValues = name;
              else allSelectedValues = allSelectedValues + ";" + name;
            }
          });
          $input.val("");
          $input.val(allSelectedValues);
        } else {
          var allSelectedValues = "";
          $('input[type="checkbox"]').each(function () {
            var isChecked = $(this).prop("checked");

            var name = $(this).prop("name");
            var currentChekBoxId = $(this).prop("id");
            if (isChecked) {
              if (allSelectedValues.length == 0) allSelectedValues = name;
              else allSelectedValues = allSelectedValues + ";" + name;
            }
          });
          $input.val("");
          $input.val(allSelectedValues);
        }
      });
      var allSelValues = "";
      $('input[type="checkbox"]').each(function () {
        var isChecked = $(this).prop("checked");

        var name = $(this).prop("name");
        var currentChekBoxId = $(this).prop("id");
        if (isChecked) {
          if (allSelValues.length == 0) allSelValues = name;
          else allSelValues = allSelValues + ";" + name;
        }
      });
      $input.val("");
      $input.val(allSelValues);
    };

    this.handleKeyDown = function (e) {
      if (e.which == $.ui.keyCode.ENTER && e.ctrlKey) {
        scope.save();
      } else if (e.which == $.ui.keyCode.ESCAPE) {
        e.preventDefault();
        scope.cancel();
      } else if (e.which == $.ui.keyCode.TAB && e.shiftKey) {
        e.preventDefault();
        args.grid.navigatePrev();
      } else if (e.which == $.ui.keyCode.TAB) {
        e.preventDefault();
        args.grid.navigateNext();
      }
    };

    this.save = function () {
      args.commitChanges();
      $wrapper.hide();
    };

    this.cancel = function () {
      $input.val(defaultValue);
      args.cancelChanges();
    };

    this.hide = function () {
      $wrapper.hide();
    };

    this.show = function () {
      $wrapper.show();
    };

    this.position = function (position) {
      $wrapper.css("top", position.top - 5).css("left", position.left - 5);
    };

    this.destroy = function () {
      $wrapper.remove();
    };

    this.focus = function () {
      $input.focus();
    };

    this.loadValue = function (item) {
      $input.val((defaultValue = item[args.column.field]));
    };

    this.serializeValue = function () {
      return $input.val();
    };

    this.applyValue = function (item, state) {
      item[args.column.field] = state;
    };

    this.isValueChanged = function () {
      return !($input.val() == "" && defaultValue == null) && $input.val() != defaultValue;
    };

    this.validate = function () {
      if (args.column.validator) {
        var validationResults = args.column.validator($input.val());
        if (!validationResults.valid) {
          return validationResults;
        }
      }

      return {
        valid: true,
        msg: null,
      };
    };

    this.init();
  }

  function SelectCellEditor(args) {
    var $select;
    var defaultValue;
    var scope = this;

    this.init = function () {
      if (args.column.options) {
        opt_values = args.column.options.split(",");
      } else {
        opt_values = "yes,no".split(",");
      }
      option_str = "";
      for (i in opt_values) {
        v = opt_values[i];
        option_str += "<OPTION value='" + v + "'>" + v + "</OPTION>";
      }
      $select = $("<SELECT tabIndex='0' class='editor-select'>" + option_str + "</SELECT>");
      $select.appendTo(args.container);
      $select.focus();
    };

    this.destroy = function () {
      $select.remove();
    };

    this.focus = function () {
      $select.focus();
    };

    this.loadValue = function (item) {
      defaultValue = item[args.column.field];
      $select.val(defaultValue);
    };

    this.serializeValue = function () {
      if (args.column.options) {
        return $select.val();
      } else {
        return $select.val() == "yes";
      }
    };

    this.applyValue = function (item, state) {
      item[args.column.field] = state;
    };

    this.isValueChanged = function () {
      return $select.val() != defaultValue;
    };

    this.validate = function () {
      return {
        valid: true,
        msg: null,
      };
    };

    this.init();
  }

  function cloneMessage(gridObj) {
    var clone = {};
    for (var key in gridObj) {
      if (gridObj.hasOwnProperty(key))
        //ensure not adding inherited props
        clone[key] = gridObj[key];
    }
    return clone;
  }

  function requiredFieldValidator(value) {
    if (value == null || value == undefined || !value.length) {
      return { valid: false, msg: "This is a required field" };
    } else {
      return { valid: true, msg: null };
    }
  }

  var selectedData = [];
  function deleteRow() {
    var obj = {};
    var selectedIndexes;
    var rowId = [];
    selectedIndexes = grid.getSelectedRows();
    console.log(selectedIndexes);
    if (selectedIndexes == undefined || selectedIndexes == "") {
      alert("삭제할 ROW를 선택하세요");
    } else {
      jQuery.each(selectedIndexes, function (index, value) {
        obj = dataView.getItemByIdx(value); //삭제할 row index의 item 을 object화
        obj["action"] = "d"; //item object에 action:"d" 태그를 추가
        selectedData.push(obj); //array of object를 생성
        var item = dataView.getItem(value); //row index에서 item 추출
        rowId.push(item.id); //item.id를 array에 추가
      });
      console.log(rowId);
      jQuery.each(rowId, function (index, value) {
        dataView.deleteItem(value); //row를 한줄 delete할때마다 index가 바뀌므로 index사용금지, rowId를 별도로 먼저 생성해야한다.
      });
      console.log(selectedData);
    }
  }

  function saveData() {
    postGrid(JSON.stringify(selectedData));
    selectedData = []; //buffer clear
  }

  function cancelData() {
    getGrid();
    for (var i = 0; i < selectedData.length; i++) {
      if (selectedData[i].action == "c") {
        var item = selectedData[i];
        console.log(item);
        dataView.deleteItem(item.id);
      }
    }
    grid.invalidateAllRows();
    grid.render();
    selectedData = []; //buffer clear
  }

  var maxPeak;
  var selectedRow;
  var selectedRowData = [];
  var dataView;
  var grid;
  var griddata = [];
  var columns = [
    {
      id: "id",
      name: "ID",
      field: "id",
      width: 40,
      behavior: "select",
      cssClass: "cell-selection",
      cannotTriggerInsert: true,
      resizable: false,
      selectable: false,
      excludeFromColumnPicker: true,
    },
    { id: "name", name: "Name", field: "name", editor: Slick.Editors.Text },
    { id: "location", name: "Location", field: "location", editor: Slick.Editors.Text },
    {
      id: "occupation",
      name: "Occupation",
      field: "occupation",
      options: "Sales,Marketing,Engineer,concultant,Student,Teacher",
      editor: SelectCellEditor,
    },
    {
      id: "hobby1",
      name: "Hobby1",
      field: "hobby1",
      editor: MultiSelectDropdownEditor,
    },
    { id: "birth", name: "Birthday", field: "birth", editor: Slick.Editors.Date },
    { id: "address", name: "Address", field: "address", width: 100, editor: Slick.Editors.LongText }, //multi line textbox
    { id: "phone", name: "Phone", field: "phone", editor: Slick.Editors.Text },
    // {
    //   id: "%",
    //   name: "% Complete",
    //   field: "percentComplete",
    //   width: 80,
    //   resizable: false,
    //   formatter: Slick.Formatters.PercentCompleteBar,
    //   editor: Slick.Editors.PercentComplete
    // },
    { id: "reg_date", name: "등록일", field: "reg_date", minWidth: 60 },
    { id: "upd_date", name: "수정일", field: "upd_date", minWidth: 60 },
    {
      id: "check_bit",
      name: "Check",
      width: 80,
      minWidth: 20,
      maxWidth: 80,
      cssClass: "cell-effort-driven",
      field: "check_bit",
      formatter: Slick.Formatters.Checkmark,
      editor: Slick.Editors.Checkbox,
    },
  ];
  var options = {
    columnPicker: {
      columnTitle: "Columns",
      hideForceFitButton: false,
      hideSyncResizeButton: false,
      forceFitTitle: "Force fit columns",
      syncResizeTitle: "Synchronous resize",
    },
    editable: true,
    enableAddRow: true,
    enableCellNavigation: true,
    asyncEditorLoading: true,
    forceFitColumns: false,
    topPanelHeight: 25,
    autoEdit: true, //cell 클릭시 자동 입력 모드로 설정
  };

  dataView = new Slick.Data.DataView({ inlineFilters: true });

  function postGrid(postData) {
    $.ajax({
      url: "/modules/t1sub1sub3/post", // modules/t1sub1sub3/post으로 라우팅
      async: false, //success시 grid를 그리므로 async로 처리하여도 된다
      dataType: "json",
      type: "POST",
      data: { data: postData },
      success: function (result) {
        if (result) {
          console.log(result.resultData + " db 기록 성공");
          getGrid();
        }
      },
    });
  }

  function makeReport(param) {
    var membersString = JSON.stringify(members);
    $.ajax({
      url: "/reports/report3", // modules/t1sub1sub3/post으로 라우팅
      async: false, //success시 grid를 그리므로 async로 처리하여도 된다
      dataType: "json",
      type: "POST",
      data: { memberList: membersString, title: param },
      success: function (result) {
        if (result) {
          console.log("Success:");
          console.log(result);
          var resData = result.res;
          console.log(resData + " Report가 정상 발행되었습니다");
          $("#test").text(resData + " Report가 정상 발행되었습니다");
          // $("#pdfDoc").html(
          //   '<iframe style="width:100%;height:100%;border:0" type="application/pdf" src="/reportOut/' +
          //     resData +
          //     '.pdf"></iframe>'
          // );

          var html = `<html>
            <style>html,body {padding:0;margin:0;} </style>
            <body>
            <iframe style="width:100%;height:100%;border:0" type="application/pdf" src="/reportOut/${resData}.pdf"></iframe>           
            </body></html>`;
          var a = window.open("/", "", "_blank");
          a.document.write(html);
          a.document.close();
        }
      },
    });
  }
  function getGrid() {
    //Ajax GET Method로 db temp_table에서 data read
    $.ajax({
      url: "/modules/t1sub1sub3/get", // modules/t1sub1sub3/get으로 라우팅
      async: true, //success시 grid를 그리므로 async로 처리하여도 된다
      dataType: "json",
      type: "GET",
      //data: { data: get },
      success: function (result) {
        if (result) {
          //console.log(result);
          members = result; //Grobal var:members
          //console.log(members);
          //console.log(result.length);
          //console.log(result[0].name);
          for (var i = 0; i < result.length; i++) {
            griddata[i] = {
              id: result[i].id,
              name: result[i].name,
              location: result[i].location,
              occupation: result[i].occupation,
              hobby1: result[i].hobby1,
              birth: result[i].birth,
              address: result[i].address,
              phone: result[i].phone,
              check_bit: result[i].check_bit, //true,false 값
              reg_date: moment(result[i].reg_date).format("YYYY-MM-DD HH:mm:ss"), //UTC time을 Local time으로 변경(+9:00)
              upd_date: moment(result[i].upd_date).format("YYYY-MM-DD HH:mm:ss"),
              //column의 field명에 매칭시킨다.
            };
          }
          maxPeak = result[0].cnt; //레코드 카운트 값을 maxPeak에 대입
          dataView.beginUpdate();
          grid.invalidateAllRows();
          dataView.setItems(griddata); //dataView가 먼저 생성되야한다.
          dataView.endUpdate();
          grid.render();
        }
      },
    });
  }

  $(function () {
    getGrid(); //페이지가 로드되면 Grid를 표시하기위해 db 데이터를 읽음

    grid = new Slick.Grid("#myGrid", dataView, columns, options);

    grid.setSelectionModel(new Slick.CellSelectionModel()); //클릭시 cell만 select
    grid.setSelectionModel(new Slick.RowSelectionModel()); //클릭시 전체 row select
    var pager = new Slick.Controls.Pager(dataView, grid, $("#pager")); //첫째 파라메터 dataView필수
    var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, options);

    //event: cell이 편집되면 발생
    grid.onCellChange.subscribe(function (e, args) {
      var obj = {};
      obj = args.item;
      obj["action"] = "u";
      //console.log(obj);
      selectedData.push(cloneMessage(obj)); //array of object를 생성,object를 clone해야 다른 object로 추가된다
      console.log("oncellchanged");
      console.log(selectedData);
      dataView.updateItem(args.item.id, args.item);
    });

    //event:new row추가시 특정cell에 default 데이타 자동생성
    grid.onAddNewRow.subscribe(function (e, args) {
      //console.log(maxPeak);
      var obj = {};
      var item = {
        id: maxPeak + 1,
        //reg_date: dateTime, //작성시 datetime 대신 , db에 insert할때 자동으로 timestamp기록
        //upd_date: dateTime, //작성시 datetime 대신 , db에 update할때 자동으로 timestamp기록
        check: false,
      };
      $.extend(item, args.item);
      dataView.addItem(item); //new data등록
      obj = dataView.getItemById(item.id); //create경우에는 dataview에 item이 등록 된 후에 버퍼링
      obj["action"] = "c";
      selectedData.push(cloneMessage(obj)); //array of object를 생성,object를 clone해야 다른 object로 추가된다
      // console.log("onaddnewrow");
      // console.log(selectedData);
    });

    //event:여러 row 선택시 control or shift키 사용
    grid.onKeyDown.subscribe(function (e) {
      // select all rows on ctrl-a
      if (e.which != 65 || !e.ctrlKey) {
        return false;
      }

      var rows = [];
      for (var i = 0; i < dataView.getLength(); i++) {
        rows.push(i);
      }

      grid.setSelectedRows(rows);
      e.preventDefault();
    });

    //event:row count가 변경되면 grid를 새로고침(row create 시)
    dataView.onRowCountChanged.subscribe(function (e, args) {
      grid.updateRowCount();
      grid.render();
    });

    //event:row가 변경되면 grid를 새로고침(row update시 )
    dataView.onRowsChanged.subscribe(function (e, args) {
      grid.invalidateRows(args.rows);
      grid.render();
    });
  });

  var DropdownListData = [
    "Cycling",
    "Running",
    "Football",
    "Climbing",
    "Camping",
    "Movie",
    "Reading",
    "Golf",
    "Swimming",
    "TV Watching",
  ];
  function getChkBoxDataList(args) {
    var countryLeadsData = [];
    // here 'country' is column id
    if (args.column.id == "hobby1") {
      var countryData = {
        AllValues: DropdownListData,
        SelectedValues: args.item.country,
        /*
         * args.item.country is used to read the value of the field "country" of a particular row.
         * This "SelectedValues" array generates prepopulated data if you want to retrieve data from your data base.
         * Lets for emxample for row no 1 : you have 2 countries, this field captures the name of these countries(should be seprated by semicolon) and mark the checkboxes of those country as checked.
         */
      };
      return countryData;
    }

    /*
     * add else if conditions if you have another multi-select dropdown list as well.
     */
  }
</script>
